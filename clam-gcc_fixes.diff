diff -Naur CLAM-1.4.0.old/src/Flow/Ports/OutPort.hxx CLAM-1.4.0/src/Flow/Ports/OutPort.hxx
--- CLAM-1.4.0.old/src/Flow/Ports/OutPort.hxx	2010-02-18 16:33:02.000000000 -0300
+++ CLAM-1.4.0/src/Flow/Ports/OutPort.hxx	2012-09-22 21:58:33.875563480 -0300
@@ -23,7 +23,7 @@
 #define __OutPort_hxx__
 
 #include "WritingRegion.hxx"
-#include <typeinfo>
+#include "TypeInfo.hxx"
 #include <list>
 #include <string>
 #include "InPort.hxx"
diff -Naur CLAM-1.4.0.old/src/Standard/Connection.cxx CLAM-1.4.0/src/Standard/Connection.cxx
--- CLAM-1.4.0.old/src/Standard/Connection.cxx	2007-04-16 13:10:57.000000000 -0300
+++ CLAM-1.4.0/src/Standard/Connection.cxx	2012-09-22 21:56:00.188897928 -0300
@@ -26,7 +26,7 @@
 {
 
 	Connection::Connection()
-		: mMustFreeSignal(false), mConnectedSignal( NULL )
+		: mMustFreeSignal(false), mConnectedSignal( 0L )
 	{
 	}
 
diff -Naur CLAM-1.4.0.old/src/System/Threads/xtime.hxx CLAM-1.4.0/src/System/Threads/xtime.hxx
--- CLAM-1.4.0.old/src/System/Threads/xtime.hxx	2007-04-16 13:10:57.000000000 -0300
+++ CLAM-1.4.0/src/System/Threads/xtime.hxx	2012-09-23 11:41:56.185205839 -0300
@@ -35,7 +35,7 @@
 
 	enum 
 	{
-		TIME_UTC=1,
+		TIME_UTC_=1,
 		TIME_TAI,
 		TIME_MONOTONIC,
 		TIME_PROCESS,
@@ -53,7 +53,7 @@
 
 	inline int xtime_get( xtime* xtp, int clock_type )
 	{
-		if ( clock_type == TIME_UTC )
+		if ( clock_type == TIME_UTC_ )
 			{
 #ifdef WIN32
 				FILETIME ft;
@@ -85,7 +85,7 @@
     inline void to_time(int milliseconds, xtime& xt)
     {
 
-        xtime_get(&xt, TIME_UTC);
+        xtime_get(&xt, TIME_UTC_);
 
         xt.sec += (milliseconds / MILLISECONDS_PER_SECOND);
         xt.nsec += ((milliseconds % MILLISECONDS_PER_SECOND) * NANOSECONDS_PER_MILLISECOND);
@@ -126,7 +126,7 @@
     {
         xtime cur;
         
-		xtime_get(&cur, TIME_UTC);
+		xtime_get(&cur, TIME_UTC_);
         
         if (xt.sec < cur.sec || (xt.sec == cur.sec && xt.nsec < cur.nsec))
         {
diff -Naur CLAM-1.4.0.old/src/Tools/MIDIIO/File/MIDISongPlayer.hxx CLAM-1.4.0/src/Tools/MIDIIO/File/MIDISongPlayer.hxx
--- CLAM-1.4.0.old/src/Tools/MIDIIO/File/MIDISongPlayer.hxx	2007-04-16 13:10:57.000000000 -0300
+++ CLAM-1.4.0/src/Tools/MIDIIO/File/MIDISongPlayer.hxx	2012-09-22 21:57:54.685563767 -0300
@@ -33,7 +33,7 @@
 	private:
 		class SongPlayerImpl* mImpl; // hide implementation
 	public:
-		SongPlayer(Song* song = NULL);
+		SongPlayer(Song* song = 0L);
 		void Init(Song* song);
 		~SongPlayer();
 
diff -Naur CLAM-1.4.0.old/test/NonPortedTests/TestThreading.cxx CLAM-1.4.0/test/NonPortedTests/TestThreading.cxx
--- CLAM-1.4.0.old/test/NonPortedTests/TestThreading.cxx	2007-04-16 13:10:57.000000000 -0300
+++ CLAM-1.4.0/test/NonPortedTests/TestThreading.cxx	2012-09-23 11:42:21.688538991 -0300
@@ -32,7 +32,7 @@
 	// it should time out
 
 	CLAM::xtime xt;
-	CLAM_ASSERT( CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, " Something went wrong with time initialization" );
+	CLAM_ASSERT( CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, " Something went wrong with time initialization" );
 	xt.nsec += 100000000; // one tenth of a sec
 
 	CLAM_ASSERT( condition.TimedWait( lock, xt ) == false, "Condition didn't timeout" );
@@ -69,7 +69,7 @@
 
 	// Fast timeout
 	CLAM::xtime xt;
-	CLAM_ASSERT( CLAM::xtime_get( &xt, CLAM::TIME_UTC ) == CLAM::TIME_UTC, "Clock test failed" );
+	CLAM_ASSERT( CLAM::xtime_get( &xt, CLAM::TIME_UTC_ ) == CLAM::TIME_UTC_, "Clock test failed" );
 	xt.nsec += 100000000; // one tenth of a second
 
 	// This should timeout
@@ -101,7 +101,7 @@
     {
         // Construct and initialize an xtime for a fast time out.
         CLAM::xtime xt;
-        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "Clock Test failed");
+        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "Clock Test failed");
         xt.nsec += 100000000; // one tenth of a second
 
         TimedLockType lock(mutex, xt);
@@ -116,7 +116,7 @@
 
     // Construct and initialize an xtime for a fast time out.
     CLAM::xtime xt;
-    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "Clock test failed");
+    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "Clock test failed");
     xt.nsec += 100000000;
 
     // Test the lock and the mutex with condition variables.
@@ -132,7 +132,7 @@
     CLAM_ASSERT(lock, "Lock() failed");
     lock.Unlock();
     CLAM_ASSERT(!lock, "Unlock() failed");
-    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "Test failed");
+    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "Test failed");
     xt.nsec += 100000000;
     CLAM_ASSERT(lock.TimedLock(xt), "TimedLock() did not work");
 }
@@ -344,7 +344,7 @@
 
 		// Test timed_wait.
 		CLAM::xtime xt;
-		CLAM_ASSERT( CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "Clock mismatch!" );
+		CLAM_ASSERT( CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "Clock mismatch!" );
 		xt.nsec += 100000000; // one tenth of a second
 		while (notified != 3)
 			condition.TimedWait(lock, xt);
@@ -354,7 +354,7 @@
 		condition.NotifyOne();
 
 	   // Test predicate timed_wait.
-		CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "Clock mismatch!" );
+		CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "Clock mismatch!" );
 		xt.sec += 2;
 		CLAM_ASSERT( condition.TimedWait(lock, xt, ConditionPredicate(notified, 4)), "Test Condition Wait failed: TimedOut!");
 		CLAM_ASSERT(lock, "Lock messed during wait");
@@ -385,7 +385,7 @@
             test_cond.condition.Wait(lock);
         CLAM_ASSERT(test_cond.awoken == 1, "Test failed" );
 
-        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "test condition waits failed");
+        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "test condition waits failed");
 		t.Sleep( 1000 );
         test_cond.notified++;
         test_cond.condition.NotifyOne();
@@ -393,7 +393,7 @@
             test_cond.condition.Wait(lock);
         CLAM_ASSERT(test_cond.awoken == 2, "test condition waits failed");
 
-        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "test condition waits failed");
+        CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "test condition waits failed");
         t.Sleep( 1000 );
         test_cond.notified++;
         test_cond.condition.NotifyOne();
@@ -402,11 +402,11 @@
         CLAM_ASSERT(test_cond.awoken == 3, "test condition waits failed");
 	}
 
-	CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "test condition waits failed");
+	CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "test condition waits failed");
     t.Sleep( 1000 );
     test_cond.notified++;
     test_cond.condition.NotifyOne();
-    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC) == CLAM::TIME_UTC, "test condition waits failed");
+    CLAM_ASSERT(CLAM::xtime_get(&xt, CLAM::TIME_UTC_) == CLAM::TIME_UTC_, "test condition waits failed");
     t.Sleep(1000);
     t.Stop();
     CLAM_ASSERT(test_cond.awoken == 4, "test condition waits failed");
